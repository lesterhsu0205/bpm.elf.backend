<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.line.bank.bxi</groupId>
    <artifactId>bpm-elf-backend</artifactId>
    <!-- 版本由外部 version.txt 讀取 -->
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>BPM ELF Backend API</name>

    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.4.3</spring-boot.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.3</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>

        <!-- 排除 templates 和 tomcat 下的資源不打包進 WAR -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>templates/**</exclude>
                    <exclude>tomcat/**</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <!-- 自訂文件操作：解壓 WAR、複製模板、模擬部署環境 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>write-version-to-file</id>
                        <!-- 在 package 階段執行 -->
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- 將 project.version 寫入 version.txt（覆寫或新建） -->
                                <echo file="${project.basedir}/version.txt"
                                      encoding="UTF-8"
                                      append="false">
                                    ${project.version}
                                </echo>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>post-war-operations</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}/ROOT"/>
                                <unzip src="${project.build.directory}/${project.build.finalName}.war"
                                       dest="${project.build.directory}/ROOT"/>

                                <delete dir="mockEnv"/>
                                <delete dir="logs"/>

                                <!-- templates 未來手動第一次搬運即可(不打包進 war，是額外拷貝出去) -->
                                <copy todir="mockEnv/data/${project.artifactId}/templates">
                                    <fileset dir="src/main/resources/templates"/>
                                </copy>

                                <copy todir="mockEnv/opt/apps/${project.artifactId}">
                                    <fileset dir="${project.build.directory}/ROOT"/>
                                </copy>

                                <copy file="version.txt"
                                      todir="mockEnv/opt/apps/${project.artifactId}"/>

                                <!-- 複製 bin scripts -->
                                <copy todir="mockEnv/opt/sw/tomcat/${project.artifactId}/bin">
                                    <fileset dir="bin"/>
                                </copy>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Spring Boot Maven Plugin: build-info -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <!-- 啟用分層 JAR（layers）分層功能僅對可執行 JAR 生效（bootJar），
                    對純 WAR 沒意義，除非 <packaging>jar</packaging>-->
                    <layers>
                        <enabled>true</enabled>
                    </layers>
                </configuration>
                <executions>
                    <!-- 僅執行 build-info，不執行 repackage -->
                    <execution>
                        <id>build-info</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                    <!-- 跳過可執行 WAR（僅保留純 WAR）時，把 repackage 的 skip 設為 true -->
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
