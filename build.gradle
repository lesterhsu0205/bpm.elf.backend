plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.line.bank.bxi'
version = '0.0.2.SNAPSHOT'

// 確保 version 正確顯示
println "Building project version: ${version}"

springBoot {
    buildInfo {
        properties {
            artifact = 'bpm-elf-backend'
            version
            group
            name = 'BPM ELF Backend API'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'  // 使用外部 Tomcat
}

// 排除 resources 不進入 war, 這是 resources 相對路徑，不需加 src/main/resources
processResources {
    exclude 'templates/**'
    exclude 'tomcat/**'
}

war {
    archiveFileName = "bpm.elf.backend-${version}.war"

    doLast {
        println 'Extracting WAR...'

        mkdir('build/ROOT')
        copy {
            from zipTree(archiveFile.get().asFile)
            into file('build/ROOT')
        }

        delete file('mockEnv')
        delete file('logs')

        // templates 未來手動第一次搬運即可(不打包進 war，是額外拷貝出去)
        copy {
            from('src/main/resources/templates')
            into('mockEnv/data/bpm-elf-backend/templates')
        }

        copy {
            from('build/ROOT')
            into('mockEnv/opt/apps/bpm-elf-backend')
        }

        copy {
            from('version.txt')
            into('mockEnv/opt/apps/bpm-elf-backend')
        }

        copy {
            from('bin')
            into('mockEnv/opt/sw/tomcat/bpm-elf-backend/bin')
        }

        // hot reload, tomcat's ROOT.xml
//        copy {
//            from('src/main/resources/tomcat/conf')
//            into('mockEnv/opt/sw/tomcat/conf')
//        }
    }

    finalizedBy 'writeVersionFile'
}

/**
 * Task：將 project.version 寫入 version.txt
 */
tasks.register('writeVersionFile') {
    description = 'Writes project.version into version.txt at project root'
    doLast {
        def file = project.layout.projectDirectory.file('version.txt').asFile
        file.text = project.version.toString()
        println "Wrote version ${project.version} to ${file}"
    }
}

bootWar {
    enabled = false
}

// 生成 jar 使用 embedded tomcat
tasks.named('bootJar') {
    layered {
        enabled.set(true)
    }
    doLast {
        println 'Extracting Layered JAR...'
        mkdir('build/ROOT')
        copy {
            from(zipTree(archiveFile.get().asFile))
            into('build/ROOT')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}